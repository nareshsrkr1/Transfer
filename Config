import os
import subprocess
import yaml
import concurrent.futures

def get_directory_size(dir_path):
    try:
        du_output = subprocess.check_output(['du', '-sh', dir_path])
        size_str, _ = du_output.split(maxsplit=1)
        size_str = size_str.decode('utf-8').strip()
        size, unit = float(size_str[:-1]), size_str[-1]
        if unit == 'K':
            size *= 1024
        elif unit == 'M':
            size *= 1024 * 1024
        elif unit == 'G':
            size *= 1024 * 1024 * 1024
        elif unit == 'T':
            size *= 1024 * 1024 * 1024 * 1024
        return int(size)
    except subprocess.CalledProcessError:
        return -1

def scan_directory(args):
    dir_path, threshold_space_limit = args
    directories_with_space = []
    
    dir_size = get_directory_size(dir_path)
    if dir_size > threshold_space_limit:
        directories_with_space.append((dir_path, dir_size))
    return directories_with_space

def get_directories_with_space(config_file):
    with open(config_file, 'r') as f:
        config = yaml.safe_load(f)['app_space_monitor']

    directories_with_space = []

    for app_config in config:
        app_name = app_config['name']
        threshold_space_limit = app_config['threshold'] * 1024 * 1024 * 1024  # Convert GB to bytes
        
        for path_entry in app_config.get('paths', []):
            app_path = path_entry['path']
            with concurrent.futures.ThreadPoolExecutor() as executor:
                results = executor.map(scan_directory, [(app_path, threshold_space_limit)])
                for result in results:
                    directories_with_space.extend(result)
    return directories_with_space

# Example usage
config_file = 'config.yml'
result = get_directories_with_space(config_file)

if result:
    print("Directories with space more than threshold limit:")
    for dir_path, space_used in result:
        print(f"Directory Path: {dir_path}, Space Used: {space_used} bytes")
else:
    print("No directories found with space more than threshold limit.")
