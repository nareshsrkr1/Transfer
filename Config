import os
import subprocess
import yaml
import concurrent.futures
import multiprocessing
import sqlite3

# Function to calculate directory size using du -sh
def get_directory_size(dir_path):
    try:
        du_output = subprocess.check_output(['du', '-sh', dir_path])
        size_str, _ = du_output.split(maxsplit=1)
        size_str = size_str.decode('utf-8').strip()
        size, unit = float(size_str[:-1]), size_str[-1]
        if unit == 'K':
            size *= 1024
        elif unit == 'M':
            size *= 1024 * 1024
        elif unit == 'G':
            size *= 1024 * 1024 * 1024
        elif unit == 'T':
            size *= 1024 * 1024 * 1024 * 1024
        return int(size)
    except subprocess.CalledProcessError:
        return -1

# Function to scan a directory and get directories exceeding threshold
def scan_directory(args):
    dir_path, threshold_space_limit = args
    directories_with_space = []

    dir_size = get_directory_size(dir_path)
    if dir_size > threshold_space_limit:
        directories_with_space.append((dir_path, dir_size))
    return directories_with_space

# Function to get directories with space exceeding threshold
def get_directories_with_space(config_file):
    directories_with_space = []

    with open(config_file, 'r') as f:
        config = yaml.safe_load(f)['app_space_monitor']

    for app_config in config:
        app_name = app_config['name']
        threshold_space_limit = app_config['threshold'] * 1024 * 1024 * 1024  # Convert GB to bytes
        
        for path_entry in app_config.get('paths', []):
            app_path = path_entry['path']
            
            if os.path.exists(app_path) and os.path.isdir(app_path):
                with concurrent.futures.ThreadPoolExecutor() as executor:
                    results = executor.map(scan_directory, [(app_path, threshold_space_limit)])
                    for result in results:
                        directories_with_space.extend(result)
    return directories_with_space

# Function to save results to database
def save_to_db(results):
    conn = sqlite3.connect('directory_space.db')
    cursor = conn.cursor()

    cursor.execute('''CREATE TABLE IF NOT EXISTS directory_space (
                        id INTEGER PRIMARY KEY AUTOINCREMENT,
                        servername TEXT,
                        app_name TEXT,
                        sub_app_path TEXT,
                        absolute_path TEXT,
                        free_space_gb REAL,
                        occupied_space_gb REAL
                    )''')

    for result in results:
        servername = 'your_servername'  # Change this to your server name
        app_name = result[0]
        sub_app_path = result[1]
        absolute_path = result[2]
        free_space_gb = round((result[3] - result[4]) / (1024 ** 3), 2)
        occupied_space_gb = round(result[4] / (1024 ** 3), 2)

        cursor.execute('''INSERT INTO directory_space (servername, app_name, sub_app_path, absolute_path,
                                                        free_space_gb, occupied_space_gb)
                          VALUES (?, ?, ?, ?, ?, ?)''', (servername, app_name, sub_app_path, absolute_path,
                                                        free_space_gb, occupied_space_gb))
    
    conn.commit()
    conn.close()

# Example usage
if __name__ == '__main__':
    config_file = 'config.yml'
    results = get_directories_with_space(config_file)

    if results:
        with concurrent.futures.ProcessPoolExecutor() as executor:
            executor.map(save_to_db, [results])
        print("Results saved to database.")
    else:
        print("No directories found with space more than threshold limit.")
