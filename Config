import pyodbc

# Function to save results to SQL Server database
def save_to_db(results):
    conn_str = 'DRIVER={SQL Server};SERVER=your_server;DATABASE=your_database;UID=your_username;PWD=your_password'
    conn = pyodbc.connect(conn_str)
    cursor = conn.cursor()

    try:
        cursor.execute('''CREATE TABLE directory_space (
                            id INT IDENTITY(1,1) PRIMARY KEY,
                            servername VARCHAR(100),
                            app_name VARCHAR(100),
                            sub_app_path VARCHAR(100),
                            absolute_path VARCHAR(255),
                            free_space_gb FLOAT,
                            occupied_space_gb FLOAT
                        )''')
        print("Table created successfully.")
    except pyodbc.Error as e:
        print("Table creation failed:", e)

    try:
        for result in results:
            servername = 'your_servername'  # Change this to your server name
            app_name = result[0]
            sub_app_path = result[1]
            absolute_path = result[2]
            free_space_gb = round((result[3] - result[4]) / (1024 ** 3), 2)
            occupied_space_gb = round(result[4] / (1024 ** 3), 2)

            cursor.execute('''INSERT INTO directory_space (servername, app_name, sub_app_path, absolute_path,
                                                            free_space_gb, occupied_space_gb)
                              VALUES (?, ?, ?, ?, ?, ?)''', (servername, app_name, sub_app_path, absolute_path,
                                                            free_space_gb, occupied_space_gb))
        conn.commit()
        print("Data inserted successfully.")
    except pyodbc.Error as e:
        print("Data insertion failed:", e)
    finally:
        conn.close()

# Example usage
if __name__ == '__main__':
    config_file = 'config.yml'
    results = get_directories_with_space(config_file)

    if results:
        with concurrent.futures.ProcessPoolExecutor() as executor:
            executor.map(save_to_db, [results])
    else:
        print("No directories found with space more than threshold limit.")
