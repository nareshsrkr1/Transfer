WITH Saccr_Leg_Sum AS (
    SELECT 
        LEFT(legTransactionId, CHARINDEX('.', legTransactionId) - 1) AS Base_TransactionId,
        SUM(TRY_CAST(stdAllocatedRwa AS FLOAT)) AS TotalLegRwa
    FROM saccr_rwa_ead_data
    WHERE CHARINDEX('.', legTransactionId) > 0
    GROUP BY LEFT(legTransactionId, CHARINDEX('.', legTransactionId) - 1)
)
UPDATE unfd_positions_dt
SET 
    CCR_RWA = CASE
        WHEN saccr_leg.stdAllocatedRwa IS NOT NULL THEN TRY_CAST(saccr_leg.stdAllocatedRwa AS FLOAT)  -- Direct match on legTransactionId
        WHEN saccr_leg_agg.TotalLegRwa IS NOT NULL THEN saccr_leg_agg.TotalLegRwa                     -- Aggregated match on split legTransactionId
        WHEN saccr_trans.stdAllocatedRwa IS NOT NULL THEN TRY_CAST(saccr_trans.stdAllocatedRwa AS FLOAT) -- Direct match on transactionId
        ELSE TRY_CAST(CCR_RWA AS FLOAT)  -- Ensure ELSE condition preserves standard format
    END,
    RWA_SACCR_FLAG = CASE
        WHEN saccr_leg.stdAllocatedRwa IS NOT NULL THEN 'Y'
        WHEN saccr_leg_agg.TotalLegRwa IS NOT NULL THEN 'Y'
        WHEN saccr_trans.stdAllocatedRwa IS NOT NULL THEN 'Y'
        ELSE 'N'
    END
FROM 
    unfd_positions_dt unfd
    LEFT JOIN saccr_rwa_ead_data saccr_leg
        ON unfd.Transaction_ID_FACS = saccr_leg.legTransactionId
    LEFT JOIN Saccr_Leg_Sum saccr_leg_agg
        ON unfd.Transaction_ID_FACS = saccr_leg_agg.Base_TransactionId
    LEFT JOIN saccr_rwa_ead_data saccr_trans
        ON unfd.Transaction_ID_FACS = saccr_trans.transactionId;
